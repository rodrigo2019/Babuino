D G "__PCH__" 0 18 ""5.058""
D G "__DEVICE__" 0 18 "2622"
D G "__DATE__" 0 18 ""18-set-16""
D G "__TIME__" 0 18 ""16:53:23""
D G "_UNICODE" 0 18 ""?""
D G "__EVAL" 0 18 ""?"" "Standard Header file for the PIC18F26K22 device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
f N "set_tris_a" 2 45 ""
v L "value" 2 45 "int8" `54 
f B "set_tris_a" 2 45 "void(int8 value)" `53 
f N "set_tris_b" 2 46 ""
v L "value" 2 46 "int8" `56 
f B "set_tris_b" 2 46 "void(int8 value)" `55 
f N "set_tris_c" 2 47 ""
v L "value" 2 47 "int8" `58 
f B "set_tris_c" 2 47 "void(int8 value)" `57 
f N "set_tris_e" 2 48 ""
v L "value" 2 48 "int8" `60 
f B "set_tris_e" 2 48 "void(int8 value)" `59 
f N "get_tris_a" 2 49 ""
f B "get_tris_a" 2 49 "int8()" `61 
f N "get_tris_b" 2 50 ""
f B "get_tris_b" 2 50 "int8()" `62 
f N "get_tris_c" 2 51 ""
f B "get_tris_c" 2 51 "int8()" `63 
f N "get_tris_e" 2 52 ""
f B "get_tris_e" 2 52 "int8()" `64 
f N "output_a" 2 53 ""
v L "value" 2 53 "int8" `66 
f B "output_a" 2 53 "void(int8 value)" `65 
f N "output_b" 2 54 ""
v L "value" 2 54 "int8" `68 
f B "output_b" 2 54 "void(int8 value)" `67 
f N "output_c" 2 55 ""
v L "value" 2 55 "int8" `70 
f B "output_c" 2 55 "void(int8 value)" `69 
f N "output_e" 2 56 ""
v L "value" 2 56 "int8" `72 
f B "output_e" 2 56 "void(int8 value)" `71 
f N "input_a" 2 57 ""
f B "input_a" 2 57 "int8()" `73 
f N "input_b" 2 58 ""
f B "input_b" 2 58 "int8()" `74 
f N "input_c" 2 59 ""
f B "input_c" 2 59 "int8()" `75 
f N "input_e" 2 60 ""
f B "input_e" 2 60 "int8()" `76 
f N "input_change_a" 2 61 ""
f B "input_change_a" 2 61 "int8()" `77 
f N "input_change_b" 2 62 ""
f B "input_change_b" 2 62 "int8()" `78 
f N "input_change_c" 2 63 ""
f B "input_change_c" 2 63 "int8()" `79 
f N "input_change_e" 2 64 ""
f B "input_change_e" 2 64 "int8()" `80 
f N "port_b_pullups" 2 65 ""
v L "upmask" 2 65 "int8" `82 
f B "port_b_pullups" 2 65 "void(int8 upmask)" `81 
f N "port_e_pullups" 2 66 ""
v L "value" 2 66 "int8" `84 
f B "port_e_pullups" 2 66 "void(int8 value)" `83 
f N "input" 2 67 ""
v L "pin" 2 67 "int16" `86 
f B "input" 2 67 "int8(int16 pin)" `85 
f N "input_state" 2 68 ""
v L "pin" 2 68 "int16" `88 
f B "input_state" 2 68 "int8(int16 pin)" `87 
f N "output_low" 2 69 ""
v L "pin" 2 69 "int16" `90 
f B "output_low" 2 69 "void(int16 pin)" `89 
f N "output_high" 2 70 ""
v L "pin" 2 70 "int16" `92 
f B "output_high" 2 70 "void(int16 pin)" `91 
f N "output_toggle" 2 71 ""
v L "pin" 2 71 "int16" `94 
f B "output_toggle" 2 71 "void(int16 pin)" `93 
f N "output_bit" 2 72 ""
v L "pin" 2 72 "int16" `96 
v L "level" 2 72 "int8" `97 
f B "output_bit" 2 72 "void(int16 pin,int8 level)" `95 
f N "output_float" 2 73 ""
v L "pin" 2 73 "int16" `99 
f B "output_float" 2 73 "void(int16 pin)" `98 
f N "output_drive" 2 74 ""
v L "pin" 2 74 "int16" `101 
f B "output_drive" 2 74 "void(int16 pin)" `100  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 78 "31744"
d G "PIN_A1" 2 79 "31745"
d G "PIN_A2" 2 80 "31746"
d G "PIN_A3" 2 81 "31747"
d G "PIN_A4" 2 82 "31748"
d G "PIN_A5" 2 83 "31749"
d G "PIN_A6" 2 84 "31750"
d G "PIN_A7" 2 85 "31751"
d G "PIN_B0" 2 87 "31752"
d G "PIN_B1" 2 88 "31753"
d G "PIN_B2" 2 89 "31754"
d G "PIN_B3" 2 90 "31755"
d G "PIN_B4" 2 91 "31756"
d G "PIN_B5" 2 92 "31757"
d G "PIN_B6" 2 93 "31758"
d G "PIN_B7" 2 94 "31759"
d G "PIN_C0" 2 96 "31760"
d G "PIN_C1" 2 97 "31761"
d G "PIN_C2" 2 98 "31762"
d G "PIN_C3" 2 99 "31763"
d G "PIN_C4" 2 100 "31764"
d G "PIN_C5" 2 101 "31765"
d G "PIN_C6" 2 102 "31766"
d G "PIN_C7" 2 103 "31767"
d G "PIN_E3" 2 105 "31779"
d G "FALSE" 2 108 "0"
d G "TRUE" 2 109 "1"
d G "BYTE" 2 111 "int8"
d G "BOOLEAN" 2 112 "int1"
d G "getc" 2 114 "getch"
d G "fgetc" 2 115 "getch"
d G "getchar" 2 116 "getch"
d G "putc" 2 117 "putchar"
d G "fputc" 2 118 "putchar"
d G "fgets" 2 119 "gets"
d G "fputs" 2 120 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
f N "restart_cause" 2 125 ""
f B "restart_cause" 2 125 "int8()" `102 
f N "reset_cpu" 2 126 ""
f B "reset_cpu" 2 126 "void()" `103 
f N "sleep" 2 127 ""
f B "sleep" 2 127 "void()" `104 
f N "sleep" 2 128 ""
v L "type" 2 128 "int8" `106 
f B "sleep" 2 128 "void(int8 type)" `105  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 2 130 "7"
d G "MCLR_FROM_SLEEP" 2 131 "11"
d G "MCLR_FROM_RUN" 2 132 "15"
d G "NORMAL_POWER_UP" 2 133 "12"
d G "BROWNOUT_RESTART" 2 134 "14"
d G "WDT_FROM_SLEEP" 2 135 "3"
d G "RESET_INSTRUCTION" 2 136 "0"
d G "SLEEP_FULL" 2 139 "0" "Default"
d G "SLEEP_IDLE" 2 140 "1" "Clock and peripherals don't stop"
c L "sleep" 2 3 5 "FUNCTION"
f N "setup_timer_0" 2 147 ""
v L "mode" 2 147 "int8" `108 
f B "setup_timer_0" 2 147 "void(int8 mode)" `107 
f N "set_timer0" 2 148 ""
v L "value" 2 148 "int16" `110 
f B "set_timer0" 2 148 "void(int16 value)" `109 
f N "get_timer0" 2 149 ""
f B "get_timer0" 2 149 "int16()" `111 
f N "setup_counters" 2 150 ""
v L "mode" 2 150 "int8" `113 
v L "prescaler" 2 150 "int8" `114 
f B "setup_counters" 2 150 "void(int8 mode,int8 prescaler)" `112 
f N "set_rtcc" 2 151 ""
v L "value" 2 151 "int16" `116 
f B "set_rtcc" 2 151 "void(int16 value)" `115 
f N "get_rtcc" 2 152 ""
f B "get_rtcc" 2 152 "int16()" `117  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 154 "0"
d G "T0_EXT_L_TO_H" 2 155 "32"
d G "T0_EXT_H_TO_L" 2 156 "48"
d G "T0_DIV_1" 2 158 "8"
d G "T0_DIV_2" 2 159 "0"
d G "T0_DIV_4" 2 160 "1"
d G "T0_DIV_8" 2 161 "2"
d G "T0_DIV_16" 2 162 "3"
d G "T0_DIV_32" 2 163 "4"
d G "T0_DIV_64" 2 164 "5"
d G "T0_DIV_128" 2 165 "6"
d G "T0_DIV_256" 2 166 "7"
d G "T0_OFF" 2 168 "0x80"
d G "T0_8_BIT" 2 170 "0x40"
d G "RTCC_INTERNAL" 2 174 "0"
d G "RTCC_EXT_L_TO_H" 2 175 "32"
d G "RTCC_EXT_H_TO_L" 2 176 "48"
d G "RTCC_DIV_1" 2 177 "8"
d G "RTCC_DIV_2" 2 178 "0"
d G "RTCC_DIV_4" 2 179 "1"
d G "RTCC_DIV_8" 2 180 "2"
d G "RTCC_DIV_16" 2 181 "3"
d G "RTCC_DIV_32" 2 182 "4"
d G "RTCC_DIV_64" 2 183 "5"
d G "RTCC_DIV_128" 2 184 "6"
d G "RTCC_DIV_256" 2 185 "7"
d G "RTCC_OFF" 2 186 "0x80"
d G "RTCC_8_BIT" 2 187 "0x40"
c L "get_rtcc" 2 3 8 "FUNCTION"
f N "setup_wdt" 2 198 ""
v L "mode" 2 198 "int16" `119 
f B "setup_wdt" 2 198 "void(int16 mode)" `118 
f N "restart_wdt" 2 199 ""
f B "restart_wdt" 2 199 "void()" `120  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 201 "0x100"
d G "WDT_OFF" 2 202 "0"
d G "WDT_4MS" 2 204 "0x300"
d G "WDT_8MS" 2 205 "0x500"
d G "WDT_16MS" 2 206 "0x700"
d G "WDT_32MS" 2 207 "0x900"
d G "WDT_64MS" 2 208 "0xB00"
d G "WDT_128MS" 2 209 "0xD00"
d G "WDT_256MS" 2 210 "0xF00"
d G "WDT_512MS" 2 211 "0x1100"
d G "WDT_1S" 2 212 "0x1300"
d G "WDT_2S" 2 213 "0x1500"
d G "WDT_4S" 2 214 "0x1700"
d G "WDT_8S" 2 215 "0x1900"
d G "WDT_16" 2 216 "0x1B00"
d G "WDT_32S" 2 217 "0x1D00"
d G "WDT_64S" 2 218 "0x1F00"
d G "WDT_128S" 2 219 "0x2100"
c L "restart_wdt" 2 3 3 "FUNCTION"
f N "setup_timer_1" 2 224 ""
v L "mode" 2 224 "int16" `122 
f B "setup_timer_1" 2 224 "void(int16 mode)" `121 
f N "get_timer1" 2 225 ""
f B "get_timer1" 2 225 "int16()" `123 
f N "set_timer1" 2 226 ""
v L "value" 2 226 "int16" `125 
f B "set_timer1" 2 226 "void(int16 value)" `124  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 229 "0"
d G "T1_INTERNAL" 2 230 "0x07"
d G "T1_EXTERNAL" 2 231 "0x87"
d G "T1_EXTERNAL_SYNC" 2 232 "0x83"
d G "T1_FOSC" 2 233 "0x47"
d G "T1_ENABLE_SOSC" 2 235 "0x08"
d G "T1_DIV_BY_1" 2 237 "0"
d G "T1_DIV_BY_2" 2 238 "0x10"
d G "T1_DIV_BY_4" 2 239 "0x20"
d G "T1_DIV_BY_8" 2 240 "0x30"
d G "T1_GATE" 2 242 "0x8000"
d G "T1_GATE_INVERTED" 2 243 "0xC000"
d G "T1_GATE_TOGGLE" 2 244 "0xA000"
d G "T1_GATE_SINGLE" 2 245 "0x9000"
d G "T1_GATE_TIMER2" 2 246 "0x8100"
d G "T1_GATE_COMP1" 2 247 "0x8200"
d G "T1_GATE_COMP2" 2 248 "0x8300"
c L "set_timer1" 2 3 3 "FUNCTION"
f N "setup_timer_2" 2 253 ""
v L "mode" 2 253 "int8" `127 
v L "period" 2 253 "int8" `128 
v L "postscale" 2 253 "int8" `129 
f B "setup_timer_2" 2 253 "void(int8 mode,int8 period,int8 postscale)" `126 
f N "get_timer2" 2 254 ""
f B "get_timer2" 2 254 "int8()" `130 
f N "set_timer2" 2 255 ""
v L "value" 2 255 "int8" `132 
f B "set_timer2" 2 255 "void(int8 value)" `131  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 257 "0"
d G "T2_DIV_BY_1" 2 258 "4"
d G "T2_DIV_BY_4" 2 259 "5"
d G "T2_DIV_BY_16" 2 260 "6"
c L "set_timer2" 2 3 3 "FUNCTION"
f N "setup_timer_3" 2 265 ""
v L "mode" 2 265 "int16" `134 
f B "setup_timer_3" 2 265 "void(int16 mode)" `133 
f N "get_timer3" 2 266 ""
f B "get_timer3" 2 266 "int16()" `135 
f N "set_timer3" 2 267 ""
v L "value" 2 267 "int16" `137 
f B "set_timer3" 2 267 "void(int16 value)" `136  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 2 270 "0"
d G "T3_INTERNAL" 2 271 "0x07"
d G "T3_EXTERNAL" 2 272 "0x87"
d G "T3_EXTERNAL_SYNC" 2 273 "0x83"
d G "T3_FOSC" 2 274 "0x47"
d G "T3_ENABLE_SOSC" 2 276 "0x08"
d G "T3_DIV_BY_1" 2 278 "0"
d G "T3_DIV_BY_2" 2 279 "0x10"
d G "T3_DIV_BY_4" 2 280 "0x20"
d G "T3_DIV_BY_8" 2 281 "0x30"
d G "T3_GATE" 2 283 "0x8000"
d G "T3_GATE_INVERTED" 2 284 "0xC000"
d G "T3_GATE_TOGGLE" 2 285 "0xA000"
d G "T3_GATE_SINGLE" 2 286 "0x9000"
d G "T3_GATE_TIMER4" 2 287 "0x8100"
d G "T3_GATE_COMP1" 2 288 "0x8200"
d G "T3_GATE_COMP2" 2 289 "0x8300"
c L "set_timer3" 2 3 3 "FUNCTION"
f N "setup_timer_4" 2 294 ""
v L "mode" 2 294 "int16" `139 
v L "period" 2 294 "int8" `140 
v L "postscaler" 2 294 "int8" `141 
f B "setup_timer_4" 2 294 "void(int16 mode,int8 period,int8 postscaler)" `138 
f N "get_timer4" 2 295 ""
f B "get_timer4" 2 295 "int8()" `142 
f N "set_timer4" 2 296 ""
v L "value" 2 296 "int8" `144 
f B "set_timer4" 2 296 "void(int8 value)" `143  "Constants used for SETUP_TIMER_4() are:"
d G "T4_DISABLED" 2 298 "0"
d G "T4_DIV_BY_1" 2 299 "4"
d G "T4_DIV_BY_4" 2 300 "5"
d G "T4_DIV_BY_16" 2 301 "6"
c L "set_timer4" 2 3 3 "FUNCTION"
f N "setup_timer_5" 2 306 ""
v L "mode" 2 306 "int16" `146 
f B "setup_timer_5" 2 306 "void(int16 mode)" `145 
f N "get_timer5" 2 307 ""
f B "get_timer5" 2 307 "int16()" `147 
f N "set_timer5" 2 308 ""
v L "value" 2 308 "int16" `149 
f B "set_timer5" 2 308 "void(int16 value)" `148  "Constants used for SETUP_TIMER_5() are:"
d G "T5_DISABLED" 2 311 "0"
d G "T5_INTERNAL" 2 312 "0x07"
d G "T5_EXTERNAL" 2 313 "0x87"
d G "T5_EXTERNAL_SYNC" 2 314 "0x83"
d G "T5_FOSC" 2 315 "0x47"
d G "T5_LFINTRC" 2 316 "0xC7"
d G "T5_ENABLE_SOSC" 2 318 "0x08"
d G "T5_DIV_BY_1" 2 320 "0"
d G "T5_DIV_BY_2" 2 321 "0x10"
d G "T5_DIV_BY_4" 2 322 "0x20"
d G "T5_DIV_BY_8" 2 323 "0x30"
d G "T5_GATE" 2 325 "0x8000"
d G "T5_GATE_INVERTED" 2 326 "0xC000"
d G "T5_GATE_TOGGLE" 2 327 "0xA000"
d G "T5_GATE_SINGLE" 2 328 "0x9000"
d G "T5_GATE_TIMER6" 2 329 "0x8100"
d G "T5_GATE_COMP1" 2 330 "0x8200"
d G "T5_GATE_COMP2" 2 331 "0x8300"
c L "set_timer5" 2 3 3 "FUNCTION"
f N "setup_timer_6" 2 336 ""
v L "mode" 2 336 "int16" `151 
v L "period" 2 336 "int8" `152 
v L "postscaler" 2 336 "int8" `153 
f B "setup_timer_6" 2 336 "void(int16 mode,int8 period,int8 postscaler)" `150 
f N "get_timer6" 2 337 ""
f B "get_timer6" 2 337 "int8()" `154 
f N "set_timer6" 2 338 ""
v L "value" 2 338 "int8" `156 
f B "set_timer6" 2 338 "void(int8 value)" `155  "Constants used for SETUP_TIMER_6() are:"
d G "T6_DISABLED" 2 341 "0"
d G "T6_DIV_BY_1" 2 342 "4"
d G "T6_DIV_BY_4" 2 343 "5"
d G "T6_DIV_BY_16" 2 344 "6"
c L "set_timer6" 2 3 4 "FUNCTION"
f N "setup_ccp1" 2 350 ""
v L "mode" 2 350 "int32" `158 
f B "setup_ccp1" 2 350 "void(int32 mode)" `157 
f N "setup_ccp1" 2 351 ""
v L "mode" 2 351 "int32" `160 
v L "pwm" 2 351 "int8" `161 
f B "setup_ccp1" 2 351 "void(int32 mode,int8 pwm)" `159 
f N "set_pwm1_duty" 2 352 ""
v L "value" 2 352 "int16" `163 
f B "set_pwm1_duty" 2 352 "void(int16 value)" `162  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 354 "0"
d G "CCP_CAPTURE_FE" 2 355 "0x04"
d G "CCP_CAPTURE_RE" 2 356 "0x05"
d G "CCP_CAPTURE_DIV_4" 2 357 "0x06"
d G "CCP_CAPTURE_DIV_16" 2 358 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 2 359 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 360 "0x09"
d G "CCP_COMPARE_INT" 2 361 "0x0A"
d G "CCP_COMPARE_INT_AND_TOGGLE" 2 362 "0x02"
d G "CCP_COMPARE_RESET_TIMER" 2 363 "0x0B"
d G "CCP_PWM" 2 364 "0x0C"
d G "CCP_PWM_PLUS_1" 2 365 "0x1c"
d G "CCP_PWM_PLUS_2" 2 366 "0x2c"
d G "CCP_PWM_PLUS_3" 2 367 "0x3c"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
d G "CCP_USE_TIMER1_AND_TIMER2" 2 376 "0x0000"
d G "CCP_USE_TIMER3_AND_TIMER4" 2 377 "0x0100"
d G "CCP_USE_TIMER5_AND_TIMER6" 2 378 "0x0200"
d G "CCP_PWM_H_H" 2 381 "0x0c"
d G "CCP_PWM_H_L" 2 382 "0x0d"
d G "CCP_PWM_L_H" 2 383 "0x0e"
d G "CCP_PWM_L_L" 2 384 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 2 386 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 2 387 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 2 388 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 2 390 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 2 391 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 2 392 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 2 393 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 2 394 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 2 395 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 2 396 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 2 398 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 2 399 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 2 400 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 2 402 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 2 403 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 2 404 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 2 406 "0x80000000"
d G "CCP_PULSE_STEERING_A" 2 408 "0x01000000"
d G "CCP_PULSE_STEERING_B" 2 409 "0x02000000"
d G "CCP_PULSE_STEERING_C" 2 410 "0x04000000"
d G "CCP_PULSE_STEERING_D" 2 411 "0x08000000"
d G "CCP_PULSE_STEERING_SYNC" 2 412 "0x10000000"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
f N "setup_ccp2" 2 416 ""
v L "mode" 2 416 "int32" `168 
f B "setup_ccp2" 2 416 "void(int32 mode)" `167 
f N "setup_ccp2" 2 417 ""
v L "mode" 2 417 "int32" `170 
v L "pwm" 2 417 "int8" `171 
f B "setup_ccp2" 2 417 "void(int32 mode,int8 pwm)" `169 
f N "set_pwm2_duty" 2 418 ""
v L "value" 2 418 "int16" `173 
f B "set_pwm2_duty" 2 418 "void(int16 value)" `172 
c L "set_pwm2_duty" 2 3 1 "FUNCTION"
f N "setup_ccp3" 2 424 ""
v L "mode" 2 424 "int32" `178 
f B "setup_ccp3" 2 424 "void(int32 mode)" `177 
f N "setup_ccp3" 2 425 ""
v L "mode" 2 425 "int32" `180 
v L "pwm" 2 425 "int8" `181 
f B "setup_ccp3" 2 425 "void(int32 mode,int8 pwm)" `179 
f N "set_pwm3_duty" 2 426 ""
v L "value" 2 426 "int16" `183 
f B "set_pwm3_duty" 2 426 "void(int16 value)" `182 
c L "set_pwm3_duty" 2 3 1 "FUNCTION"
f N "setup_ccp4" 2 432 ""
v L "mode" 2 432 "int32" `188 
f B "setup_ccp4" 2 432 "void(int32 mode)" `187 
f N "setup_ccp4" 2 433 ""
v L "mode" 2 433 "int32" `190 
v L "pwm" 2 433 "int8" `191 
f B "setup_ccp4" 2 433 "void(int32 mode,int8 pwm)" `189 
f N "set_pwm4_duty" 2 434 ""
v L "value" 2 434 "int16" `193 
f B "set_pwm4_duty" 2 434 "void(int16 value)" `192 
c L "set_pwm4_duty" 2 3 1 "FUNCTION"
f N "setup_ccp5" 2 440 ""
v L "mode" 2 440 "int32" `198 
f B "setup_ccp5" 2 440 "void(int32 mode)" `197 
f N "setup_ccp5" 2 441 ""
v L "mode" 2 441 "int32" `200 
v L "pwm" 2 441 "int8" `201 
f B "setup_ccp5" 2 441 "void(int32 mode,int8 pwm)" `199 
f N "set_pwm5_duty" 2 442 ""
v L "value" 2 442 "int16" `203 
f B "set_pwm5_duty" 2 442 "void(int16 value)" `202 
c L "set_pwm5_duty" 2 3 3 "FUNCTION"
f N "setup_spi" 2 449 ""
v L "mode" 2 449 "int32" `208 
f B "setup_spi" 2 449 "void(int32 mode)" `207 
f N "spi_write" 2 450 ""
v L "value" 2 450 "int8" `210 
f B "spi_write" 2 450 "void(int8 value)" `209 
f N "spi_read" 2 451 ""
f B "spi_read" 2 451 "int8()" `211 
f N "spi_read" 2 452 ""
v L "value" 2 452 "int8" `213 
f B "spi_read" 2 452 "int8(int8 value)" `212 
f N "spi_data_is_in" 2 453 ""
f B "spi_data_is_in" 2 453 "int8()" `214 
f N "setup_spi2" 2 454 ""
v L "mode" 2 454 "int32" `216 
f B "setup_spi2" 2 454 "void(int32 mode)" `215 
f N "spi_write2" 2 455 ""
v L "value" 2 455 "int8" `218 
f B "spi_write2" 2 455 "void(int8 value)" `217 
f N "spi_read2" 2 456 ""
f B "spi_read2" 2 456 "int8()" `219 
f N "spi_read2" 2 457 ""
v L "value" 2 457 "int8" `221 
f B "spi_read2" 2 457 "int8(int8 value)" `220 
f N "spi_data_is_in2" 2 458 ""
f B "spi_data_is_in2" 2 458 "int8()" `222  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 460 "0x00"
d G "SPI_MASTER" 2 461 "0x20"
d G "SPI_SLAVE" 2 462 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 463 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 464 "0x00"
d G "SPI_CLK_DIV_4" 2 465 "0x00"
d G "SPI_CLK_DIV_16" 2 466 "0x01"
d G "SPI_CLK_DIV_64" 2 467 "0x02"
d G "SPI_CLK_T2" 2 468 "0x03"
d G "SPI_SS_DISABLED" 2 469 "0x01"
d G "SPI_XMIT_L_TO_H" 2 471 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 472 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 474 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 475 "0x8000"
d G "SPI_L_TO_H" 2 478 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 479 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in2" 2 3 2 "FUNCTION"
f N "setup_uart" 2 483 ""
v L "baud" 2 483 "int32" `224 
f B "setup_uart" 2 483 "void(int32 baud)" `223 
f N "setup_uart" 2 484 ""
v L "baud" 2 484 "int32" `226 
v L "stream" 2 484 "int8" `227 
f B "setup_uart" 2 484 "void(int32 baud,int8 stream)" `225 
f N "setup_uart" 2 485 ""
v L "baud" 2 485 "int32" `229 
v L "stream" 2 485 "int8" `230 
v L "clock" 2 485 "int32" `231 
f B "setup_uart" 2 485 "void(int32 baud,int8 stream,int32 clock)" `228 
f N "set_uart_speed" 2 486 ""
v L "baud" 2 486 "int32" `233 
f B "set_uart_speed" 2 486 "void(int32 baud)" `232 
f N "set_uart_speed" 2 487 ""
v L "baud" 2 487 "int32" `235 
v L "stream" 2 487 "int8" `236 
f B "set_uart_speed" 2 487 "void(int32 baud,int8 stream)" `234 
f N "set_uart_speed" 2 488 ""
v L "baud" 2 488 "int32" `238 
v L "stream" 2 488 "int8" `239 
v L "clock" 2 488 "int32" `240 
f B "set_uart_speed" 2 488 "void(int32 baud,int8 stream,int32 clock)" `237  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 492 "2"
d G "UART_DATA" 2 493 "4"
d G "UART_AUTODETECT" 2 494 "8"
d G "UART_AUTODETECT_NOWAIT" 2 495 "9"
d G "UART_WAKEUP_ON_RDA" 2 496 "10"
d G "UART_SEND_BREAK" 2 497 "13"
c L "set_uart_speed" 2 3 3 "FUNCTION"
f N "setup_comparator" 2 501 ""
v L "mode" 2 501 "int32" `242 
f B "setup_comparator" 2 501 "void(int32 mode)" `241  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 2 504 "0x404"
d G "NC_NC" 2 505 "0x404"
d G "CP1_A0_A3" 2 508 "0x000080"
d G "CP1_A1_A3" 2 509 "0x000081"
d G "CP1_B3_A3" 2 510 "0x000082"
d G "CP1_B1_A3" 2 511 "0x000083"
d G "CP1_A0_DAC" 2 512 "0x000084"
d G "CP1_A1_DAC" 2 513 "0x000085"
d G "CP1_B3_DAC" 2 514 "0x000086"
d G "CP1_B1_DAC" 2 515 "0x000087"
d G "CP1_A0_FVR" 2 516 "0x200084"
d G "CP1_A1_FVR" 2 517 "0x200085"
d G "CP1_B3_FVR" 2 518 "0x200086"
d G "CP1_B1_FVR" 2 519 "0x200087"
d G "CP1_OUT_ON_A4" 2 521 "0x000020"
d G "CP1_INVERT" 2 522 "0x000010"
d G "CP1_FAST" 2 523 "0x000008"
d G "CP1_HYST" 2 524 "0x080000"
d G "CP1_SYNC" 2 525 "0x020000"
d G "CP2_A0_A2" 2 528 "0x008000"
d G "CP2_A1_A2" 2 529 "0x008100"
d G "CP2_B3_A2" 2 530 "0x008200"
d G "CP2_B1_A2" 2 531 "0x008300"
d G "CP2_A0_DAC" 2 532 "0x008400"
d G "CP2_A1_DAC" 2 533 "0x008500"
d G "CP2_B3_DAC" 2 534 "0x008600"
d G "CP2_B1_DAC" 2 535 "0x008700"
d G "CP2_A0_FVR" 2 536 "0x108400"
d G "CP2_A1_FVR" 2 537 "0x108500"
d G "CP2_B3_FVR" 2 538 "0x108600"
d G "CP2_B1_FVR" 2 539 "0x108700"
d G "CP2_OUT_ON_A5" 2 541 "0x002000"
d G "CP2_INVERT" 2 542 "0x001000"
d G "CP2_FAST" 2 543 "0x000800"
d G "CP2_HYST" 2 544 "0x040000"
d G "CP2_SYNC" 2 545 "0x010000"
c L "setup_comparator" 2 3 2 "FUNCTION"
f N "setup_vref" 2 552 ""
v L "mode" 2 552 "int8" `246 
f B "setup_vref" 2 552 "void(int8 mode)" `245  "Constants used in setup_vref() are:"
d G "VREF_OFF" 2 554 "0"
d G "VREF_1v024" 2 555 "0x90"
d G "VREF_2v048" 2 556 "0xA0"
d G "VREF_4v096" 2 557 "0xB0"
c L "setup_vref" 2 3 2 "FUNCTION"
f N "setup_low_volt_detect" 2 561 ""
v L "mode" 2 561 "int8" `248 
f B "setup_low_volt_detect" 2 561 "void(int8 mode)" `247  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 2 563 "0x1F"
d G "LVD_47" 2 564 "0x1E"
d G "LVD_43" 2 565 "0x1D"
d G "LVD_41" 2 566 "0x1C"
d G "LVD_38" 2 567 "0x1B"
d G "LVD_36" 2 568 "0x1A"
d G "LVD_34" 2 569 "0x19"
d G "LVD_32" 2 570 "0x18"
d G "LVD_29" 2 571 "0x17"
d G "LVD_28" 2 572 "0x16"
d G "LVD_27" 2 573 "0x15"
d G "LVD_25" 2 574 "0x14"
d G "LVD_24" 2 575 "0x13"
d G "LVD_22" 2 576 "0x12"
d G "LVD_20" 2 577 "0x11"
d G "LVD_18" 2 578 "0x10"
d G "LVD_TRIGGER_BELOW" 2 580 "0"
d G "LVD_TRIGGER_ABOVE" 2 581 "0x80"
c L "setup_low_volt_detect" 2 3 3 "FUNCTION"
f N "setup_dac" 2 586 ""
v L "mode" 2 586 "int8" `250 
f B "setup_dac" 2 586 "void(int8 mode)" `249 
f N "dac_write" 2 587 ""
v L "value" 2 587 "int8" `252 
f B "dac_write" 2 587 "void(int8 value)" `251  "Constants used in SETUP_DAC() are:"
d G "DAC_OFF" 2 589 "0"
d G "DAC_VSS_VDD" 2 590 "0x80"
d G "DAC_VREF_VDD" 2 591 "0x81"
d G "DAC_VSS_VREF" 2 592 "0x84"
d G "DAC_VREF_VREF" 2 593 "0x85"
d G "DAC_VSS_FVR" 2 594 "0x88"
d G "DAC_VREF_FVR" 2 595 "0x89"
d G "DAC_OUTPUT" 2 597 "0x20"
d G "DAC_LVP_POS" 2 598 "0x40"
d G "DAC_LVP_NEG" 2 599 "0"
c L "dac_write" 2 3 2 "FUNCTION"
f N "setup_oscillator" 2 604 ""
v L "mode" 2 604 "int16" `254 
f B "setup_oscillator" 2 604 "int8(int16 mode)" `253 
f N "setup_oscillator" 2 605 ""
v L "mode" 2 605 "int16" `256 
v L "tune" 2 605 "sint8" `257 
f B "setup_oscillator" 2 605 "int8(int16 mode,sint8 tune)" `255  "Constants used in setup_oscillator() are:"
d G "OSC_PLL_ON" 2 607 "0x4000"
d G "OSC_PLL_OFF" 2 608 "0"
d G "OSC_31250" 2 609 "0x8000"
d G "OSC_31KHZ" 2 610 "0x00"
d G "OSC_250KHZ" 2 611 "0x10"
d G "OSC_500KHZ" 2 612 "0x20"
d G "OSC_1MHZ" 2 613 "0x30"
d G "OSC_2MHZ" 2 614 "0x40"
d G "OSC_4MHZ" 2 615 "0x50"
d G "OSC_8MHZ" 2 616 "0x60"
d G "OSC_16MHZ" 2 617 "0x70"
d G "OSC_32MHZ" 2 618 "0x4060"
d G "OSC_64MHZ" 2 619 "0x4070"
d G "OSC_TIMER1" 2 621 "1"
d G "OSC_INTRC" 2 622 "2"
d G "OSC_NORMAL" 2 623 "0"
d G "OSC_IDLE_MODE" 2 625 "0x80"
d G "OSC_STATE_STABLE" 2 629 "4"
d G "OSC_STATE_EXT_RUNNING" 2 630 "8"
c L "setup_oscillator" 2 3 4 "FUNCTION"
f N "setup_adc" 2 637 ""
v L "mode" 2 637 "int16" `259 
f B "setup_adc" 2 637 "void(int16 mode)" `258 
f N "read_adc" 2 638 ""
f B "read_adc" 2 638 "int8()" `260 
f N "read_adc" 2 639 ""
v L "mode" 2 639 "int8" `262 
f B "read_adc" 2 639 "int8(int8 mode)" `261 
f N "read_adc" 2 640 ""
f G "read_adc" 2 640 "int16()" `263 
f N "read_adc" 2 641 ""
v L "mode" 2 641 "int8" `264 
f G "read_adc" 2 641 "int16(int8 mode,int32 pins)" `263 
f N "adc_done" 2 642 ""
f B "adc_done" 2 642 "int8(int8 mode,int32 pins)" `263  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 644 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 645 "0x100"
d G "ADC_CLOCK_DIV_4" 2 646 "0x04"
d G "ADC_CLOCK_DIV_8" 2 647 "0x01"
d G "ADC_CLOCK_DIV_16" 2 648 "0x05"
d G "ADC_CLOCK_DIV_32" 2 649 "0x02"
d G "ADC_CLOCK_DIV_64" 2 650 "0x06"
d G "ADC_CLOCK_INTERNAL" 2 651 "0x07" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 2 653 "0x00"
d G "ADC_TAD_MUL_2" 2 654 "0x08"
d G "ADC_TAD_MUL_4" 2 655 "0x10"
d G "ADC_TAD_MUL_6" 2 656 "0x18"
d G "ADC_TAD_MUL_8" 2 657 "0x20"
d G "ADC_TAD_MUL_12" 2 658 "0x28"
d G "ADC_TAD_MUL_16" 2 659 "0x30"
d G "ADC_TAD_MUL_20" 2 660 "0x38"
c L "adc_done" 2 3 1 "FUNCTION"
f N "setup_adc_ports" 2 663 ""
v L "pins" 2 663 "int32" `265 
f B "setup_adc_ports" 2 663 "void(int32 pins)" `264 
f N "setup_adc_ports" 2 664 ""
v L "pins" 2 664 "int32" `267 
v L "reference" 2 664 "int32" `268 
f B "setup_adc_ports" 2 664 "void(int32 pins,int32 reference)" `266 
f N "set_analog_pins" 2 665 ""
v L "pin" 2 665 "int8" `270 
f B "set_analog_pins" 2 665 "void(int8 pin,*int8 _VA_LIST)" `269 
f N "setup_adc_reference" 2 666 ""
v L "reference" 2 666 "int32" `273 
f B "setup_adc_reference" 2 666 "void(int32 reference)" `272 
f N "set_adc_channel" 2 667 ""
v L "channel" 2 667 "int8" `275 
f B "set_adc_channel" 2 667 "void(int8 channel)" `274  "Constants used in SETUP_ADC_PORTS() are:"
d G "sAN0" 2 671 "0x00800000" "| A0"
d G "sAN1" 2 672 "0x01000000" "| A1"
d G "sAN2" 2 673 "0x02000000" "| A2"
d G "sAN3" 2 674 "0x04000000" "| A3"
d G "sAN4" 2 675 "0x08000000" "| A5"
d G "sAN8" 2 676 "0x00010000" "| B2"
d G "sAN9" 2 677 "0x00020000" "| B3"
d G "sAN10" 2 678 "0x00008000" "| B1"
d G "sAN11" 2 679 "0x00040000" "| B4"
d G "sAN12" 2 680 "0x00004000" "| B0"
d G "sAN13" 2 681 "0x00080000" "| B5"
d G "sAN14" 2 682 "0x00000100" "| C2"
d G "sAN15" 2 683 "0x00000200" "| C3"
d G "sAN16" 2 684 "0x00000400" "| C4"
d G "sAN17" 2 685 "0x00000800" "| C5"
d G "sAN18" 2 686 "0x00001000" "| C6"
d G "sAN19" 2 687 "0x00002000" "| C7"
d G "NO_ANALOGS" 2 688 "0" "None"
d G "ALL_ANALOG" 2 689 "0x0F8FFF00" "A0 A1 A2 A3 A5 B2 B3 B1 B4 B0 B5 C2 C3 C4 C5 C6 C7"
d G "VSS_VDD" 2 692 "0x00000000" "| Range 0-Vdd"
d G "VSS_VREF" 2 693 "0x40000000" "| Range 0-VrefH"
d G "VSS_FVR" 2 694 "0x80000000" "| Range 0-Fvr BUF2"
d G "VREF_VDD" 2 695 "0x10000000" "| Range VrefL-Vdd"
d G "VREF_VREF" 2 696 "0x50000000" "| Range VrefL-VrefH"
d G "VREF_FVR" 2 697 "0x90000000" "| Range VrefL-Fvr BUF2"
d G "CTMU_CHANNEL" 2 701 "0x1D"
d G "DAC_CHANNEL" 2 702 "0x1E"
d G "FVR_CHANNEL" 2 703 "0x1F"
d G "ADC_START_AND_READ" 2 706 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 707 "1"
d G "ADC_READ_ONLY" 2 708 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
f N "abs" 2 714 ""
v L "x" 2 714 "sint8" `277 
f B "abs" 2 714 "sint8(sint8 x)" `276 
f N "abs" 2 715 ""
v L "x" 2 715 "sint16" `279 
f B "abs" 2 715 "sint16(sint16 x)" `278 
f N "abs" 2 716 ""
v L "x" 2 716 "sint32" `281 
f B "abs" 2 716 "sint32(sint32 x)" `280 
f N "abs" 2 717 ""
v L "x" 2 717 "float" `283 
f B "abs" 2 717 "float(float x)" `282 
f N "_mul" 2 718 ""
v L "??65535" 2 718 "int8" `285 
v L "??65535" 2 718 "int8" `286 
f B "_mul" 2 718 "int16(int8 ,int8 )" `284 
f N "_mul" 2 719 ""
v L "??65535" 2 719 "sint8" `288 
v L "??65535" 2 719 "sint8" `289 
f B "_mul" 2 719 "sint16(sint8 ,sint8 )" `287 
f N "_mul" 2 720 ""
v L "??65535" 2 720 "int16" `291 
v L "??65535" 2 720 "int16" `292 
f B "_mul" 2 720 "int32(int16 ,int16 )" `290 
f N "_mul" 2 721 ""
v L "??65535" 2 721 "sint16" `294 
v L "??65535" 2 721 "sint16" `295 
f B "_mul" 2 721 "sint32(sint16 ,sint16 )" `293  "Memory Manipulation Prototypes:"
f N "read_bank" 2 724 ""
v L "bank" 2 724 "int8" `297 
v L "offset" 2 724 "int8" `298 
f B "read_bank" 2 724 "int8(int8 bank,int8 offset)" `296 
f N "write_bank" 2 725 ""
v L "bank" 2 725 "int8" `300 
v L "offset" 2 725 "int8" `301 
v L "value" 2 725 "int8" `302 
f B "write_bank" 2 725 "void(int8 bank,int8 offset,int8 value)" `299 
f N "strcpy" 2 726 ""
v L "dest" 2 726 "*int8" `304 
v L "src" 2 726 "*int8" `305 
f B "strcpy" 2 726 "void(*int8 dest,*int8 src)" `303 
f N "memset" 2 727 ""
v L "destination" 2 727 "*int8" `307 
v L "value" 2 727 "int8" `308 
v L "num" 2 727 "int16" `309 
f B "memset" 2 727 "void(*int8 destination,int8 value,int16 num)" `306 
f N "memcpy" 2 728 ""
v L "destination" 2 728 "*int8" `311 
v L "source" 2 728 "*int8" `312 
v L "num" 2 728 "int16" `313 
f B "memcpy" 2 728 "void(*int8 destination,*int8 source,int16 num)" `310  "String Prototypes:"
f N "toupper" 2 731 ""
v L "cvalue" 2 731 "int8" `315 
f B "toupper" 2 731 "int8(int8 cvalue)" `314 
f N "tolower" 2 732 ""
v L "cvalue" 2 732 "int8" `317 
f B "tolower" 2 732 "int8(int8 cvalue)" `316 
f N "sprintf" 2 733 ""
v L "string" 2 733 "*int8" `319 
v L "cstring" 2 733 "*int8" `320 
f B "sprintf" 2 733 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `318  "Data Manipulators Prototypes:"
f N "shift_left" 2 736 ""
v L "address" 2 736 "*int8" `323 
v L "bytes" 2 736 "int8" `324 
v L "value" 2 736 "int8" `325 
f B "shift_left" 2 736 "int8(*int8 address,int8 bytes,int8 value)" `322 
f N "shift_right" 2 737 ""
v L "address" 2 737 "*int8" `327 
v L "bytes" 2 737 "int8" `328 
v L "value" 2 737 "int8" `329 
f B "shift_right" 2 737 "int8(*int8 address,int8 bytes,int8 value)" `326 
f N "rotate_left" 2 738 ""
v L "address" 2 738 "*int8" `331 
v L "bytes" 2 738 "int8" `332 
f B "rotate_left" 2 738 "void(*int8 address,int8 bytes)" `330 
f N "rotate_right" 2 739 ""
v L "address" 2 739 "*int8" `334 
v L "bytes" 2 739 "int8" `335 
f B "rotate_right" 2 739 "void(*int8 address,int8 bytes)" `333 
f N "swap" 2 740 ""
v L "value" 2 740 "int8" `337 
f B "swap" 2 740 "void(int8 value)" `336 
f N "make8" 2 741 ""
v L "var" 2 741 "int16" `339 
v L "offset" 2 741 "int8" `340 
f B "make8" 2 741 "int8(int16 var,int8 offset)" `338 
f N "make8" 2 742 ""
v L "var" 2 742 "int32" `342 
v L "offset" 2 742 "int8" `343 
f B "make8" 2 742 "int8(int32 var,int8 offset)" `341 
f N "make16" 2 743 ""
v L "varhigh" 2 743 "int8" `345 
v L "varlow" 2 743 "int8" `346 
f B "make16" 2 743 "int16(int8 varhigh,int8 varlow)" `344 
f N "make32" 2 744 ""
v L "var1" 2 744 "int16" `348 
f B "make32" 2 744 "int32(int16 var1)" `347 
f N "make32" 2 745 ""
v L "var1" 2 745 "int16" `350 
v L "var2" 2 745 "int16" `351 
f B "make32" 2 745 "int32(int16 var1,int16 var2)" `349 
f N "make32" 2 746 ""
v L "var1" 2 746 "int16" `353 
v L "var2" 2 746 "int8" `354 
f B "make32" 2 746 "int32(int16 var1,int8 var2)" `352 
f N "make32" 2 747 ""
v L "var1" 2 747 "int16" `356 
v L "var2" 2 747 "int8" `357 
v L "var3" 2 747 "int8" `358 
f B "make32" 2 747 "int32(int16 var1,int8 var2,int8 var3)" `355 
f N "make32" 2 748 ""
v L "var1" 2 748 "int8" `360 
f B "make32" 2 748 "int32(int8 var1)" `359 
f N "make32" 2 749 ""
v L "var1" 2 749 "int8" `362 
v L "var2" 2 749 "int8" `363 
f B "make32" 2 749 "int32(int8 var1,int8 var2)" `361 
f N "make32" 2 750 ""
v L "var1" 2 750 "int8" `365 
v L "var2" 2 750 "int8" `366 
v L "var3" 2 750 "int8" `367 
f B "make32" 2 750 "int32(int8 var1,int8 var2,int8 var3)" `364 
f N "make32" 2 751 ""
v L "var1" 2 751 "int8" `369 
v L "var2" 2 751 "int8" `370 
v L "var3" 2 751 "int8" `371 
v L "var4" 2 751 "int8" `372 
f B "make32" 2 751 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `368 
f N "make32" 2 752 ""
v L "var1" 2 752 "int8" `374 
v L "var2" 2 752 "int16" `375 
f B "make32" 2 752 "int32(int8 var1,int16 var2)" `373 
f N "make32" 2 753 ""
v L "var1" 2 753 "int8" `377 
v L "var2" 2 753 "int16" `378 
v L "var3" 2 753 "int8" `379 
f B "make32" 2 753 "int32(int8 var1,int16 var2,int8 var3)" `376 
f N "make32" 2 754 ""
v L "var1" 2 754 "int8" `381 
v L "var2" 2 754 "int8" `382 
v L "var3" 2 754 "int16" `383 
f B "make32" 2 754 "int32(int8 var1,int8 var2,int16 var3)" `380 
f N "bit_set" 2 755 ""
v L "var" 2 755 "int8" `385 
v L "bit" 2 755 "int8" `386 
f B "bit_set" 2 755 "void(int8 var,int8 bit)" `384 
f N "bit_set" 2 756 ""
v L "var" 2 756 "int16" `388 
v L "bit" 2 756 "int8" `389 
f B "bit_set" 2 756 "void(int16 var,int8 bit)" `387 
f N "bit_set" 2 757 ""
v L "var" 2 757 "int32" `391 
v L "bit" 2 757 "int8" `392 
f B "bit_set" 2 757 "void(int32 var,int8 bit)" `390 
f N "bit_clear" 2 758 ""
v L "var" 2 758 "int8" `394 
v L "bit" 2 758 "int8" `395 
f B "bit_clear" 2 758 "void(int8 var,int8 bit)" `393 
f N "bit_clear" 2 759 ""
v L "var" 2 759 "int16" `397 
v L "bit" 2 759 "int8" `398 
f B "bit_clear" 2 759 "void(int16 var,int8 bit)" `396 
f N "bit_clear" 2 760 ""
v L "var" 2 760 "int32" `400 
v L "bit" 2 760 "int8" `401 
f B "bit_clear" 2 760 "void(int32 var,int8 bit)" `399 
f N "bit_test" 2 761 ""
v L "var" 2 761 "int8" `403 
v L "bit" 2 761 "int8" `404 
f B "bit_test" 2 761 "int8(int8 var,int8 bit)" `402 
f N "bit_test" 2 762 ""
v L "var" 2 762 "int16" `406 
v L "bit" 2 762 "int8" `407 
f B "bit_test" 2 762 "int8(int16 var,int8 bit)" `405 
f N "bit_test" 2 763 ""
v L "var" 2 763 "int32" `409 
v L "bit" 2 763 "int8" `410 
f B "bit_test" 2 763 "int8(int32 var,int8 bit)" `408  "#use delay() Prototypes:"
f N "delay_cycles" 2 766 ""
v L "count" 2 766 "int8" `412 
f B "delay_cycles" 2 766 "void(int8 count)" `411 
f N "delay_ms" 2 767 ""
v L "time" 2 767 "int16" `414 
f B "delay_ms" 2 767 "void(int16 time)" `413 
f N "delay_us" 2 768 ""
v L "time" 2 768 "int16" `416 
f B "delay_us" 2 768 "void(int16 time)" `415  "#use rs232() Prototypes:"
f N "putchar" 2 771 ""
v L "cdata" 2 771 "int8" `418 
f B "putchar" 2 771 "void(int8 cdata)" `417 
f N "putchar" 2 772 ""
v L "cdata" 2 772 "int8" `420 
v L "stream" 2 772 "int8" `421 
f B "putchar" 2 772 "void(int8 cdata,int8 stream)" `419 
f N "puts" 2 773 ""
v L "string" 2 773 "*int8" `423 
f B "puts" 2 773 "void(*int8 string)" `422 
f N "puts" 2 774 ""
v L "string" 2 774 "*int8" `425 
v L "stream" 2 774 "int8" `426 
f B "puts" 2 774 "void(*int8 string,int8 stream)" `424 
f N "getch" 2 775 ""
f B "getch" 2 775 "int8()" `427 
f N "getch" 2 776 ""
v L "stream" 2 776 "int8" `429 
f B "getch" 2 776 "int8(int8 stream)" `428 
f N "gets" 2 777 ""
v L "string" 2 777 "*int8" `431 
f B "gets" 2 777 "void(*int8 string)" `430 
f N "gets" 2 778 ""
v L "string" 2 778 "*int8" `433 
v L "stream" 2 778 "int8" `434 
f B "gets" 2 778 "void(*int8 string,int8 stream)" `432 
f N "kbhit" 2 779 ""
f B "kbhit" 2 779 "int8()" `435 
f N "kbhit" 2 780 ""
v L "stream" 2 780 "int8" `437 
f B "kbhit" 2 780 "int8(int8 stream)" `436 
f N "printf" 2 781 ""
v L "string" 2 781 "*int8" `439 
f B "printf" 2 781 "void(*int8 string,*int8 _VA_LIST)" `438 
f N "fprintf" 2 782 ""
v L "stream" 2 782 "int8" `442 
v L "string" 2 782 "*int8" `443 
f B "fprintf" 2 782 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `441 
f N "putc_send" 2 783 ""
f B "putc_send" 2 783 "void()" `445 
f N "fputc_send" 2 784 ""
v L "stream" 2 784 "int8" `447 
f B "fputc_send" 2 784 "void(int8 stream)" `446 
f N "rcv_buffer_full" 2 785 ""
f B "rcv_buffer_full" 2 785 "int8()" `448 
f N "rcv_buffer_full" 2 786 ""
v L "stream" 2 786 "int8" `450 
f B "rcv_buffer_full" 2 786 "int8(int8 stream)" `449 
f N "rcv_buffer_bytes" 2 787 ""
f B "rcv_buffer_bytes" 2 787 "int16()" `451 
f N "rcv_buffer_bytes" 2 788 ""
v L "stream" 2 788 "int8" `453 
f B "rcv_buffer_bytes" 2 788 "int16(int8 stream)" `452 
f N "tx_buffer_full" 2 789 ""
f B "tx_buffer_full" 2 789 "int8()" `454 
f N "tx_buffer_full" 2 790 ""
v L "stream" 2 790 "int8" `456 
f B "tx_buffer_full" 2 790 "int8(int8 stream)" `455 
f N "tx_buffer_bytes" 2 791 ""
f B "tx_buffer_bytes" 2 791 "int16()" `457 
f N "tx_buffer_bytes" 2 792 ""
v L "stream" 2 792 "int8" `459 
f B "tx_buffer_bytes" 2 792 "int16(int8 stream)" `458  "#use i2c() Prototypes:"
f N "i2c_read" 2 795 ""
f B "i2c_read" 2 795 "int8()" `460 
f N "i2c_read" 2 796 ""
v L "ack" 2 796 "int8" `462 
f B "i2c_read" 2 796 "int8(int8 ack)" `461 
f N "i2c_read" 2 797 ""
v L "stream" 2 797 "int8" `464 
v L "ack" 2 797 "int8" `465 
f B "i2c_read" 2 797 "int8(int8 stream,int8 ack)" `463 
f N "i2c_write" 2 798 ""
v L "data" 2 798 "int8" `467 
f B "i2c_write" 2 798 "int8(int8 data)" `466 
f N "i2c_write" 2 799 ""
v L "stream" 2 799 "int8" `469 
v L "data" 2 799 "int8" `470 
f B "i2c_write" 2 799 "int8(int8 stream,int8 data)" `468 
f N "i2c_start" 2 800 ""
f B "i2c_start" 2 800 "void()" `471 
f N "i2c_start" 2 801 ""
v L "stream" 2 801 "int8" `473 
f B "i2c_start" 2 801 "void(int8 stream)" `472 
f N "i2c_start" 2 802 ""
v L "stream" 2 802 "int8" `475 
v L "restart" 2 802 "int8" `476 
f B "i2c_start" 2 802 "void(int8 stream,int8 restart)" `474 
f N "i2c_stop" 2 803 ""
f B "i2c_stop" 2 803 "void()" `477 
f N "i2c_stop" 2 804 ""
v L "stream" 2 804 "int8" `479 
f B "i2c_stop" 2 804 "void(int8 stream)" `478 
f N "i2c_isr_state" 2 805 ""
f B "i2c_isr_state" 2 805 "int8()" `480 
f N "i2c_slaveaddr" 2 806 ""
v L "addr" 2 806 "int8" `482 
f B "i2c_slaveaddr" 2 806 "void(int8 addr)" `481 
f N "i2c_slaveaddr" 2 807 ""
v L "stream" 2 807 "int8" `484 
v L "addr" 2 807 "int8" `485 
f B "i2c_slaveaddr" 2 807 "void(int8 stream,int8 addr)" `483 
f N "i2c_poll" 2 808 ""
f B "i2c_poll" 2 808 "int8()" `486 
f N "i2c_poll" 2 809 ""
v L "stream" 2 809 "int8" `488 
f B "i2c_poll" 2 809 "int8(int8 stream)" `487 
f N "i2c_init" 2 810 ""
v L "baud" 2 810 "int32" `490 
f B "i2c_init" 2 810 "void(int32 baud)" `489 
f N "i2c_init" 2 811 ""
v L "stream" 2 811 "int8" `492 
v L "baud" 2 811 "int32" `493 
f B "i2c_init" 2 811 "void(int8 stream,int32 baud)" `491  "#use spi() Prototypes:"
f N "spi_xfer" 2 814 ""
f B "spi_xfer" 2 814 "int8()" `494 
f N "spi_xfer" 2 815 ""
f G "spi_xfer" 2 815 "int16(int8 data)" `495 
f N "spi_xfer" 2 816 ""
f G "spi_xfer" 2 816 "int32(int8 data)" `495 
f N "spi_xfer" 2 817 ""
v L "data" 2 817 "int8" `496 
f B "spi_xfer" 2 817 "int8(int8 data)" `495 
f N "spi_xfer" 2 818 ""
v L "data" 2 818 "int16" `498 
f B "spi_xfer" 2 818 "int16(int16 data)" `497 
f N "spi_xfer" 2 819 ""
v L "data" 2 819 "int32" `500 
f B "spi_xfer" 2 819 "int32(int32 data)" `499 
f N "spi_xfer" 2 820 ""
v L "stream" 2 820 "int8" `502 
v L "data" 2 820 "int8" `503 
f B "spi_xfer" 2 820 "int8(int8 stream,int8 data)" `501 
f N "spi_xfer" 2 821 ""
v L "stream" 2 821 "int8" `505 
v L "data" 2 821 "int16" `506 
f B "spi_xfer" 2 821 "int16(int8 stream,int16 data)" `504 
f N "spi_xfer" 2 822 ""
v L "stream" 2 822 "int8" `508 
v L "data" 2 822 "int32" `509 
f B "spi_xfer" 2 822 "int32(int8 stream,int32 data)" `507 
f N "spi_xfer" 2 823 ""
v L "stream" 2 823 "int8" `511 
v L "data" 2 823 "int8" `512 
v L "bits" 2 823 "int8" `513 
f B "spi_xfer" 2 823 "int8(int8 stream,int8 data,int8 bits)" `510 
f N "spi_xfer" 2 824 ""
v L "stream" 2 824 "int8" `515 
v L "data" 2 824 "int16" `516 
v L "bits" 2 824 "int8" `517 
f B "spi_xfer" 2 824 "int16(int8 stream,int16 data,int8 bits)" `514 
f N "spi_xfer" 2 825 ""
v L "stream" 2 825 "int8" `519 
v L "data" 2 825 "int32" `520 
v L "bits" 2 825 "int8" `521 
f B "spi_xfer" 2 825 "int32(int8 stream,int32 data,int8 bits)" `518 
f N "spi_init" 2 826 ""
v L "baud" 2 826 "int32" `523 
f B "spi_init" 2 826 "void(int32 baud)" `522 
f N "spi_init" 2 827 ""
v L "stream" 2 827 "int8" `525 
v L "baud" 2 827 "int32" `526 
f B "spi_init" 2 827 "void(int8 stream,int32 baud)" `524 
f N "spi_speed" 2 828 ""
v L "baud" 2 828 "int32" `528 
f B "spi_speed" 2 828 "void(int32 baud)" `527 
f N "spi_speed" 2 829 ""
v L "stream" 2 829 "int8" `530 
v L "baud" 2 829 "int32" `531 
f B "spi_speed" 2 829 "void(int8 stream,int32 baud)" `529 
f N "spi_speed" 2 830 ""
v L "stream" 2 830 "int8" `533 
v L "baud" 2 830 "int32" `534 
v L "clock" 2 830 "int32" `535 
f B "spi_speed" 2 830 "void(int8 stream,int32 baud,int32 clock)" `532 
f N "spi_prewrite" 2 831 ""
v L "data" 2 831 "int8" `537 
f B "spi_prewrite" 2 831 "void(int8 data)" `536 
f N "spi_prewrite" 2 832 ""
v L "data" 2 832 "int16" `539 
f B "spi_prewrite" 2 832 "void(int16 data)" `538 
f N "spi_prewrite" 2 833 ""
v L "data" 2 833 "int32" `541 
f B "spi_prewrite" 2 833 "void(int32 data)" `540 
f N "spi_prewrite" 2 834 ""
v L "??65535" 2 834 "int8" `543 
v L "data" 2 834 "int8" `544 
f B "spi_prewrite" 2 834 "void(int8 ,int8 data)" `542 
f N "spi_prewrite" 2 835 ""
v L "??65535" 2 835 "int8" `546 
v L "data" 2 835 "int16" `547 
f B "spi_prewrite" 2 835 "void(int8 ,int16 data)" `545 
f N "spi_prewrite" 2 836 ""
v L "??65535" 2 836 "int8" `549 
v L "data" 2 836 "int32" `550 
f B "spi_prewrite" 2 836 "void(int8 ,int32 data)" `548 
f N "spi_xfer_in" 2 837 ""
f B "spi_xfer_in" 2 837 "int8()" `551 
f N "spi_xfer_in" 2 838 ""
f G "spi_xfer_in" 2 838 "int16(int8 bits)" `552 
f N "spi_xfer_in" 2 839 ""
f G "spi_xfer_in" 2 839 "int32(int8 bits)" `552 
f N "spi_xfer_in" 2 840 ""
v L "bits" 2 840 "int8" `553 
f B "spi_xfer_in" 2 840 "int8(int8 bits)" `552 
f N "spi_xfer_in" 2 841 ""
v L "bits" 2 841 "int8" `555 
f G "spi_xfer_in" 2 841 "int16(int8 bits,int8 bits)" `554 
f N "spi_xfer_in" 2 842 ""
v L "bits" 2 842 "int8" `555 
f G "spi_xfer_in" 2 842 "int32(int8 bits,int8 bits)" `554 
f N "spi_xfer_in" 2 843 ""
v L "stream" 2 843 "int8" `555 
v L "bits" 2 843 "int8" `556 
f B "spi_xfer_in" 2 843 "int8(int8 stream,int8 bits)" `554 
f N "spi_xfer_in" 2 844 ""
v L "stream" 2 844 "int8" `555 
v L "bits" 2 844 "int8" `559 
f G "spi_xfer_in" 2 844 "int16(int8 stream,int8 bits,int8 task)" `557 
f N "spi_xfer_in" 2 845 ""
v L "stream" 2 845 "int8" `555 
v L "bits" 2 845 "int8" `559 
f G "spi_xfer_in" 2 845 "int32(int8 stream,int8 bits,int8 task)" `557  "#use rtos() Prototypes:"
f N "rtos_run" 2 848 ""
f B "rtos_run" 2 848 "void(int8 stream,int8 bits,int8 task)" `557 
f N "rtos_yield" 2 849 ""
f B "rtos_yield" 2 849 "void(int8 bits,int8 task)" `558 
f N "rtos_enable" 2 850 ""
v L "task" 2 850 "int8" `560 
f B "rtos_enable" 2 850 "void(int8 task)" `559 
f N "rtos_disable" 2 851 ""
v L "task" 2 851 "int8" `562 
f B "rtos_disable" 2 851 "void(int8 task)" `561 
f N "rtos_terminate" 2 852 ""
f B "rtos_terminate" 2 852 "void()" `563 
f N "rtos_await" 2 853 ""
v L "flag" 2 853 "int8" `565 
f B "rtos_await" 2 853 "void(int8 flag)" `564 
f N "rtos_wait" 2 854 ""
v L "sem" 2 854 "int8" `567 
f B "rtos_wait" 2 854 "void(int8 sem)" `566 
f N "rtos_signal" 2 855 ""
v L "sem" 2 855 "int8" `569 
f B "rtos_signal" 2 855 "void(int8 sem)" `568 
f N "rtos_msg_send" 2 856 ""
v L "task" 2 856 "int8" `571 
v L "msg" 2 856 "int8" `572 
f B "rtos_msg_send" 2 856 "void(int8 task,int8 msg)" `570 
f N "rtos_msg_read" 2 857 ""
f B "rtos_msg_read" 2 857 "int8()" `573 
f N "rtos_msg_poll" 2 858 ""
f B "rtos_msg_poll" 2 858 "int8()" `574 
f N "rtos_overrun" 2 859 ""
v L "task" 2 859 "int8" `576 
f B "rtos_overrun" 2 859 "int8(int8 task)" `575 
f N "rtos_stats" 2 860 ""
v L "task" 2 860 "int8" `578 
v L "stat" 2 860 "*int8" `579 
f B "rtos_stats" 2 860 "void(int8 task,*int8 stat)" `577  "#use timer() Prototypes:"
f N "get_ticks" 2 863 ""
f B "get_ticks" 2 863 "int8()" `580 
f N "get_ticks" 2 864 ""
f G "get_ticks" 2 864 "int16(int8 stream)" `581 
f N "get_ticks" 2 865 ""
f G "get_ticks" 2 865 "int32(int8 stream)" `581 
f N "get_ticks" 2 866 ""
v L "stream" 2 866 "int8" `582 
f B "get_ticks" 2 866 "int8(int8 stream)" `581 
f N "get_ticks" 2 867 ""
v L "stream" 2 867 "int8" `584 
f G "get_ticks" 2 867 "int16(int8 stream)" `583 
f N "get_ticks" 2 868 ""
v L "stream" 2 868 "int8" `584 
f G "get_ticks" 2 868 "int32(int8 stream)" `583 
f N "set_ticks" 2 869 ""
v L "value" 2 869 "int8" `584 
f B "set_ticks" 2 869 "void(int8 value)" `583 
f N "set_ticks" 2 870 ""
v L "value" 2 870 "int16" `586 
f B "set_ticks" 2 870 "void(int16 value)" `585 
f N "set_ticks" 2 871 ""
v L "value" 2 871 "int32" `588 
f B "set_ticks" 2 871 "void(int32 value)" `587 
f N "set_ticks" 2 872 ""
v L "stream" 2 872 "int8" `590 
v L "value" 2 872 "int8" `591 
f B "set_ticks" 2 872 "void(int8 stream,int8 value)" `589 
f N "set_ticks" 2 873 ""
v L "stream" 2 873 "int8" `593 
v L "value" 2 873 "int16" `594 
f B "set_ticks" 2 873 "void(int8 stream,int16 value)" `592 
f N "set_ticks" 2 874 ""
v L "stream" 2 874 "int8" `596 
v L "value" 2 874 "int32" `597 
f B "set_ticks" 2 874 "void(int8 stream,int32 value)" `595  "#use pwm() Prototypes:"
f N "pwm_on" 2 877 ""
f B "pwm_on" 2 877 "void()" `598 
f N "pwm_on" 2 878 ""
v L "stream" 2 878 "int8" `600 
f B "pwm_on" 2 878 "void(int8 stream)" `599 
f N "pwm_off" 2 879 ""
f B "pwm_off" 2 879 "void()" `601 
f N "pwm_off" 2 880 ""
v L "stream" 2 880 "int8" `603 
f B "pwm_off" 2 880 "void(int8 stream)" `602 
f N "pwm_set_duty" 2 881 ""
v L "duty" 2 881 "int16" `605 
f B "pwm_set_duty" 2 881 "void(int16 duty)" `604 
f N "pwm_set_duty" 2 882 ""
v L "stream" 2 882 "int8" `607 
v L "duty" 2 882 "int16" `608 
f B "pwm_set_duty" 2 882 "void(int8 stream,int16 duty)" `606 
f N "pwm_set_duty_percent" 2 883 ""
v L "percent" 2 883 "int16" `610 
f B "pwm_set_duty_percent" 2 883 "void(int16 percent)" `609 
f N "pwm_set_duty_percent" 2 884 ""
v L "stream" 2 884 "int8" `612 
v L "percent" 2 884 "int16" `613 
f B "pwm_set_duty_percent" 2 884 "void(int8 stream,int16 percent)" `611 
f N "pwm_set_frequency" 2 885 ""
v L "frequency" 2 885 "int32" `615 
f B "pwm_set_frequency" 2 885 "void(int32 frequency)" `614 
f N "pwm_set_frequency" 2 886 ""
v L "stream" 2 886 "int8" `617 
v L "frequency" 2 886 "int32" `618 
f B "pwm_set_frequency" 2 886 "void(int8 stream,int32 frequency)" `616  "#use capture() Prototypes:"
f N "get_capture_time" 2 889 ""
f B "get_capture_time" 2 889 "int16()" `619 
f N "get_capture_time" 2 890 ""
v L "stream" 2 890 "int8" `621 
f B "get_capture_time" 2 890 "int16(int8 stream)" `620 
f N "get_capture_event" 2 891 ""
f B "get_capture_event" 2 891 "int8()" `622 
f N "get_capture_event" 2 892 ""
v L "stream" 2 892 "int8" `624 
f B "get_capture_event" 2 892 "int8(int8 stream)" `623  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
f N "goto_address" 2 905 ""
v L "address" 2 905 "int32" `626 
f B "goto_address" 2 905 "void(int32 address)" `625 
f N "label_address" 2 906 ""
v L "label" 2 906 "int32" `628 
f B "label_address" 2 906 "int32(int32 label)" `627  "Program Memory Prototypes:"
f N "read_program_memory" 2 909 ""
v L "address" 2 909 "int32" `630 
v L "dataptr" 2 909 "*int8" `631 
v L "count" 2 909 "int16" `632 
f B "read_program_memory" 2 909 "void(int32 address,*int8 dataptr,int16 count)" `629 
f N "read_program_eeprom" 2 910 ""
v L "address" 2 910 "int32" `634 
f B "read_program_eeprom" 2 910 "int16(int32 address)" `633 
f N "write_program_memory" 2 911 ""
v L "address" 2 911 "int32" `636 
v L "dataptr" 2 911 "*int8" `637 
v L "count" 2 911 "int16" `638 
f B "write_program_memory" 2 911 "void(int32 address,*int8 dataptr,int16 count)" `635 
f N "write_program_eeprom" 2 912 ""
v L "address" 2 912 "int32" `640 
v L "data" 2 912 "int16" `641 
f B "write_program_eeprom" 2 912 "void(int32 address,int16 data)" `639  "EEPROM Prototypes:"
d G "__EEADDRESS__" 2 917 "unsigned int16"
f N "read_eeprom" 2 922 ""
v L "address" 2 922 "int16" `643 
f B "read_eeprom" 2 922 "int8(int16 address)" `642 
f N "write_eeprom" 2 923 ""
v L "address" 2 923 "int16" `645 
v L "value" 2 923 "int8" `646 
f B "write_eeprom" 2 923 "void(int16 address,int8 value)" `644  "#use touchpad() Prototypes:"
f N "touchpad_state" 2 926 ""
v L "state" 2 926 "int8" `648 
f B "touchpad_state" 2 926 "void(int8 state)" `647 
f N "touchpad_getc" 2 927 ""
f B "touchpad_getc" 2 927 "int8()" `649 
f N "touchpad_hit" 2 928 ""
f B "touchpad_hit" 2 928 "int8()" `650  "INT"
c L "touchpad_hit" 2 3 4 "FUNCTION"
f N "enable_interrupts" 2 934 ""
v L "interrupt" 2 934 "int32" `652 
f B "enable_interrupts" 2 934 "void(int32 interrupt)" `651 
f N "disable_interrupts" 2 935 ""
v L "interrupt" 2 935 "int32" `654 
f B "disable_interrupts" 2 935 "void(int32 interrupt)" `653 
f N "clear_interrupt" 2 936 ""
v L "interrupt" 2 936 "int32" `656 
f B "clear_interrupt" 2 936 "void(int32 interrupt)" `655 
f N "interrupt_active" 2 937 ""
v L "interrupt" 2 937 "int32" `658 
f B "interrupt_active" 2 937 "int8(int32 interrupt)" `657 
f N "interrupt_enabled" 2 938 ""
v L "interrupt" 2 938 "int32" `660 
f B "interrupt_enabled" 2 938 "int8(int32 interrupt)" `659 
f N "ext_int_edge" 2 939 ""
v L "source" 2 939 "int8" `662 
v L "edge" 2 939 "int8" `663 
f B "ext_int_edge" 2 939 "void(int8 source,int8 edge)" `661 
f N "jump_to_isr" 2 940 ""
v L "address" 2 940 "int16" `665 
f B "jump_to_isr" 2 940 "void(int16 address)" `664  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 942 "0x40"
d G "H_TO_L" 2 943 "0"
d G "GLOBAL" 2 945 "0xF2C0"
d G "PERIPH" 2 946 "0xF240"
d G "INT_RTCC" 2 947 "0x00F220"
d G "INT_TIMER0" 2 948 "0x00F220"
d G "INT_TIMER1" 2 949 "0x009D01"
d G "INT_TIMER2" 2 950 "0x009D02"
d G "INT_TIMER3" 2 951 "0x00A002"
d G "INT_EXT_L2H" 2 952 "0x5000F210"
d G "INT_EXT_H2L" 2 953 "0x6000F210"
d G "INT_EXT" 2 954 "0x00F210"
d G "INT_EXT1_L2H" 2 955 "0x5001F008"
d G "INT_EXT1_H2L" 2 956 "0x6001F008"
d G "INT_EXT1" 2 957 "0x00F008"
d G "INT_EXT2_L2H" 2 958 "0x5002F010"
d G "INT_EXT2_H2L" 2 959 "0x6002F010"
d G "INT_EXT2" 2 960 "0x00F010"
d G "INT_RB" 2 961 "0x01FFF208"
d G "INT_AD" 2 962 "0x009D40"
d G "INT_RDA" 2 963 "0x009D20"
d G "INT_TBE" 2 964 "0x009D10"
d G "INT_SSP" 2 965 "0x009D08"
d G "INT_CCP1" 2 966 "0x009D04"
d G "INT_CCP2" 2 967 "0x00A001"
d G "INT_BUSCOL" 2 968 "0x00A008"
d G "INT_COMP" 2 969 "0x00A040"
d G "INT_EEPROM" 2 970 "0x00A010"
d G "INT_TBE2" 2 971 "0x00A310"
d G "INT_RDA2" 2 972 "0x00A320"
d G "INT_OSCF" 2 973 "0x00A080"
d G "INT_HLVD" 2 974 "0x00A004"
d G "INT_BUSCOL2" 2 975 "0x00A340"
d G "INT_COMP2" 2 976 "0x00A020"
d G "INT_SSP2" 2 977 "0x00A380"
d G "INT_TIMER4" 2 978 "0x007D01"
d G "INT_TIMER5" 2 979 "0x007D02"
d G "INT_TIMER6" 2 980 "0x007D04"
d G "INT_CCP3" 2 981 "0x007A01"
d G "INT_CCP4" 2 982 "0x007A02"
d G "INT_CCP5" 2 983 "0x007A04"
d G "INT_TMR1G" 2 984 "0x00A301"
d G "INT_TMR3G" 2 985 "0x00A302"
d G "INT_TMR5G" 2 986 "0x00A304"
d G "INT_CTMU" 2 987 "0x00A308"
d G "INT_RB4" 2 988 "0x110F208"
d G "INT_RB5" 2 989 "0x120F208"
d G "INT_RB6" 2 990 "0x140F208"
d G "INT_RB7" 2 991 "0x180F208"
D G "__BOOTLOADER_H__" 3 23 ""
D G "FLASH_SIZE" 3 33 "getenv("FLASH_ERASE_SIZE")"
C L "jump_to_isr" 3 2 1 "FUNCTION"
D G "LOADER_END" 3 35 "0x4FF"
D G "LOADER_SIZE" 3 44 "LOADER_END"
D G "BOOTLOADER_AT_START" 3 47 ""
D G "PIN_0" 1 35 "PIN_C7"
D G "PIN_1" 1 36 "PIN_C6"
D G "PIN_2" 1 37 "PIN_B5"
D G "PIN_3" 1 38 "PIN_B0"
D G "PIN_4" 1 39 "PIN_C2"
D G "PIN_5" 1 40 "PIN_C1"
D G "PIN_6" 1 41 "PIN_A4"
D G "PIN_7" 1 42 "PIN_C0"
D G "PIN_8" 1 43 "PIN_B6"
D G "PIN_9" 1 44 "PIN_B7"
D G "PIN_10" 1 45 "PIN_A5"
D G "PIN_11" 1 46 "PIN_C4"
D G "PIN_12" 1 47 "PIN_C5"
D G "PIN_13" 1 48 "PIN_C3"
D G "PIN_AN0" 1 50 "PIN_A1"
D G "PIN_AN1" 1 51 "PIN_A0"
D G "PIN_AN2" 1 52 "PIN_B4"
D G "PIN_AN3" 1 53 "PIN_B3"
D G "PIN_AN4" 1 54 "PIN_B2"
D G "PIN_AN5" 1 55 "PIN_B1"
F N "main" 0 3 ""
F G "main" 0 4 "void()" `672 
V L "c" 0 6 "int8" `673 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_e" 0 0
F B "set_slow_slew_a" 1 0
F B "set_slow_slew_b" 1 0
F B "set_slow_slew_c" 1 0
F B "set_slow_slew_e" 1 0
F B "port_b_pullups" 1 0
F B "port_e_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "set_analog_pins" 0 255
F B "setup_adc_reference" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_timer_4" 3 0
F B "get_timer4" 0 0
F B "set_timer4" 1 0
F B "setup_timer_6" 3 0
F B "get_timer6" 0 0
F B "set_timer6" 1 0
F B "setup_timer_5" 1 0
F B "get_timer5" 0 0
F B "set_timer5" 1 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 2
F B "set_pwm2_duty" 1 0
F B "setup_ccp3" 1 2
F B "set_pwm3_duty" 1 0
F B "setup_ccp4" 1 0
F B "set_pwm4_duty" 1 0
F B "setup_ccp5" 1 0
F B "set_pwm5_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "pll_locked" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "setup_dac" 1 0
F B "dac_write" 1 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
