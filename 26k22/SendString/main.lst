CCS PCH C Compiler, Version 5.058, 14033               13-set-16 18:14

               Filename:   C:\Users\rodri\Dropbox\Rodrigo\Projetos PIC\BABUINO v1\Firmwares testes\26k22\SendString\main.lst

               ROM used:   264 bytes (0%)
                           Largest free fragment is 63988
               RAM used:   7 (0%) at main() level
                           9 (0%) worst case
               Stack used: 0 locations
               Stack size: 31

*
00500:  GOTO   05BA
.................... #include <main.h> 
.................... #include <18F26K22.h> 
.................... //////////// Standard Header file for the PIC18F26K22 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F26K22 
*
00508:  DATA 4E,65
0050A:  DATA 73,74
0050C:  DATA 65,20
0050E:  DATA 74,65
00510:  DATA 73,74
00512:  DATA 65,20
00514:  DATA 74,6F
00516:  DATA 64,6F
00518:  DATA 73,20
0051A:  DATA 63,61
0051C:  DATA 72,61
0051E:  DATA 63,74
00520:  DATA 65,72
00522:  DATA 65,73
00524:  DATA 20,64
00526:  DATA 69,67
00528:  DATA 69,74
0052A:  DATA 61,64
0052C:  DATA 6F,73
0052E:  DATA 20,73
00530:  DATA 65,72
00532:  DATA 61,6F
00534:  DATA 20,72
00536:  DATA 65,74
00538:  DATA 6F,72
0053A:  DATA 6E,61
0053C:  DATA 64,6F
0053E:  DATA 73,2C
00540:  DATA 20,64
00542:  DATA 65,73
00544:  DATA 74,61
00546:  DATA 20,66
00548:  DATA 6F,72
0054A:  DATA 6D,61
0054C:  DATA 00,00
0054E:  DATA 20,63
00550:  DATA 6F,6D
00552:  DATA 70,6C
00554:  DATA 65,74
00556:  DATA 61,6E
00558:  DATA 64,6F
0055A:  DATA 20,74
0055C:  DATA 6F,64
0055E:  DATA 6F,20
00560:  DATA 70,65
00562:  DATA 72,63
00564:  DATA 75,72
00566:  DATA 73,6F
00568:  DATA 20,64
0056A:  DATA 65,20
0056C:  DATA 63,6F
0056E:  DATA 6D,75
00570:  DATA 6E,69
00572:  DATA 63,61
00574:  DATA 63,61
00576:  DATA 6F,20
00578:  DATA 55,53
0057A:  DATA 42,2F
0057C:  DATA 52,53
0057E:  DATA 32,33
00580:  DATA 32,2D
00582:  DATA 52,53
00584:  DATA 32,33
00586:  DATA 32,2F
00588:  DATA 55,53
0058A:  DATA 42,0A
0058C:  DATA 0D,00
0058E:  TBLRD*+
00590:  MOVF   FF5,F
00592:  BZ    05AE
00594:  MOVFF  FF6,07
00598:  MOVFF  FF7,08
0059C:  MOVF   FF5,W
0059E:  BTFSS  F9E.4
005A0:  BRA    059E
005A2:  MOVWF  FAD
005A4:  MOVFF  07,FF6
005A8:  MOVFF  08,FF7
005AC:  BRA    058E
005AE:  RETURN 0
....................  
.................... #list 
....................  
.................... #device ADC=10 
....................  
.................... #FUSES PRIMARY                  //Primary clock is system clock when scs=00 
.................... #FUSES FCMEN                    //Fail-safe clock monitor enabled 
.................... #FUSES IESO                     //Internal External Switch Over mode enabled 
.................... #FUSES PUT                      //Power Up Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES BORV19                   //Brownout reset at 1.9V 
.................... #FUSES PBADEN                   //PORTB pins are configured as analog input channels on RESET 
.................... #FUSES CCP3B5                   //CCP3 input/output multiplexed with RB5 
.................... #FUSES HFOFST                   //High Frequency INTRC starts clocking CPU immediately 
.................... #FUSES TIMER3C0                 //Timer3 Clock In is on pin C0 
.................... #FUSES CCP2B5                   //CCP2 input/output multiplexed with RB5 
.................... #FUSES MCLR                     //Master Clear pin enabled 
.................... #FUSES STVREN                   //Stack full/underflow will cause reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NOCPB                    //No Boot Block code protection 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES NOWRTC                   //Configuration registers not write protected 
.................... #FUSES NOWRTB                   //Boot block not write protected 
.................... #FUSES NOWRTD                   //Data EEPROM not write protected 
.................... #FUSES NOEBTR                   //Memory not protected from table reads 
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads 
....................  
.................... #use delay(clock=64MHz,crystal=16MHz) 
.................... //#use delay(crystal=16MHz) 
.................... //#use delay(internal=4MHz) 
....................  
.................... #use rs232(baud=19200,parity=N,UART1,bits=8,stream=PORT1) 
005B0:  BTFSS  F9E.4
005B2:  BRA    05B0
005B4:  MOVWF  FAD
005B6:  GOTO   0608 (RETURN)
.................... #include <bootloader.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                       BOOTLOADER.H                                //// 
.................... ////                                                                   //// 
.................... ////  This include file must be included by any application loaded     //// 
.................... ////  by the example bootloader (ex_bootloader.c).                     //// 
.................... ////                                                                   //// 
.................... ////  The directives in this file relocate the reset and interrupt     //// 
.................... ////  vectors as well as reserving space for the bootloader.           //// 
.................... ////                                                                   //// 
.................... ////  LOADER_END may need to be adjusted for a specific chip and       //// 
.................... ////  bootloader.  LOADER_END must be 1 minus a multiple of            //// 
.................... ////  FLASH_ERASE_SIZE.                                                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2014 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #ifndef __BOOTLOADER_H__ 
.................... #define __BOOTLOADER_H__ 
....................  
.................... #ifndef LOADER_END 
....................  #if defined(__PCM__) 
....................   #ifdef BOOTLOADER_MODE2X 
....................    #define LOADER_END 0x4BF 
....................   #else 
....................    #define LOADER_END 0x33F 
....................   #endif 
....................  #elif defined(__PCH__) 
....................   #define FLASH_SIZE getenv("FLASH_ERASE_SIZE") 
....................   #if ((0x500 % FLASH_SIZE) == 0)         //IF 0x500 is even flash boundary 
....................    #define LOADER_END   0x4FF 
....................   #else                                  //ELSE, goto next even boundary 
....................    #define LOADER_END   ((0x500+FLASH_SIZE-(0x500 % FLASH_SIZE))-1) 
....................   #endif 
....................  #else 
....................   #error Bootloader only works with PCM or PCH compiler 
....................  #endif 
.................... #endif 
....................  
.................... #define LOADER_SIZE   LOADER_END 
....................  
.................... #ifndef BOOTLOADER_AT_START 
....................  #define BOOTLOADER_AT_START 
.................... #endif 
....................  
.................... #ifndef _bootloader 
....................  #if defined(__PCM__) 
....................   #build(reset=LOADER_END+1, interrupt=LOADER_END+5) 
....................  #elif defined(__PCH__) 
....................   #build(reset=LOADER_END+1, interrupt=LOADER_END+9) 
....................  #endif 
....................  
....................  #org 0, LOADER_END {} 
.................... #else 
....................  #ifdef __PCM__ 
....................   #if getenv("PROGRAM_MEMORY") <= 0x800 
....................    #org LOADER_END+3, (getenv("PROGRAM_MEMORY") - 1) {} 
....................   #else 
....................    #org LOADER_END+3, 0x7FF {} 
....................    #if getenv("PROGRAM_MEMORY") <= 0x1000 
....................     #org 0x800, (getenv("PROGRAM_MEMORY") - 1) {} 
....................    #else 
....................     #org 0x800, 0xFFF{} 
....................     #if getenv("PROGRAM_MEMORY") <= 0x1800 
....................      #org 0x1000, (getenv("PROGRAM_MEMORY") - 1) {} 
....................     #else 
....................      #org 0x1000, 0x17FF {} 
....................      #if getenv("PROGRAM_MEMORY") <= 0x2000 
....................       #org 0x1800, (getenv("PROGRAM_MEMORY") - 1) {} 
....................      #else 
....................       #org 0x1800, 0x1FFF {} 
....................       #if getenv("PROGRAM_MEMORY") <= 0x2800 
....................        #org 0x2000, (getenv("PROGRAM_MEMORY") - 1) {} 
....................       #else 
....................        #org 0x2000, 0x27FF {} 
....................        #if getenv("PROGRAM_MEMORY") <= 0x3000 
....................         #org 0x2800, (getenv("PROGRAM_MEMORY") - 1) {} 
....................        #else 
....................         #org 0x2800, 0x2FFF {} 
....................         #if getenv("PROGRAM_MEMORY") <= 0x3800 
....................          #org 0x3000, (getenv("PROGRAM_MEMORY") - 1) {} 
....................         #else 
....................          #org 0x3000, 0x37FF {} 
....................          #org 0x3800, 0x3FFF {} 
....................         #endif 
....................        #endif 
....................       #endif 
....................      #endif 
....................     #endif 
....................    #endif 
....................   #endif 
....................  #else 
....................   #if getenv("PROGRAM_MEMORY") <= 0x10000 
....................    #org LOADER_END+5, (getenv("PROGRAM_MEMORY") - 1) {} 
....................   #else 
....................    #org LOADER_END+5, 0xFFFE {} 
....................    #org 0x10000, (getenv("PROGRAM_MEMORY") - 1) {} 
....................   #endif 
....................  #endif 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
.................... void main() 
005BA:  CLRF   FF8
005BC:  BCF    FD0.7
005BE:  BSF    FB8.3
005C0:  MOVLW  40
005C2:  MOVWF  FAF
005C4:  MOVLW  03
005C6:  MOVWF  FB0
005C8:  MOVLW  A6
005CA:  MOVWF  FAC
005CC:  MOVLW  90
005CE:  MOVWF  FAB
005D0:  CLRF   05
005D2:  CLRF   04
005D4:  MOVLB  F
005D6:  CLRF   x38
005D8:  CLRF   x39
005DA:  CLRF   x3A
005DC:  CLRF   F77
005DE:  CLRF   F78
005E0:  CLRF   F79
.................... { 
....................  
....................  char c; 
....................    printf("Neste teste todos caracteres digitados serao retornados, desta forma"); 
005E2:  MOVLW  08
005E4:  MOVWF  FF6
005E6:  MOVLW  05
005E8:  MOVWF  FF7
005EA:  MOVLB  0
005EC:  RCALL  058E
....................    printf(" completando todo percurso de comunicacao USB/RS232-RS232/USB\n\r"); 
005EE:  MOVLW  4E
005F0:  MOVWF  FF6
005F2:  MOVLW  05
005F4:  MOVWF  FF7
005F6:  RCALL  058E
....................    while(TRUE) 
....................    { 
....................       if(kbhit(PORT1)){ 
005F8:  BTFSS  F9E.5
005FA:  BRA    0608
....................          c=getc(); 
005FC:  BTFSS  F9E.5
005FE:  BRA    05FC
00600:  MOVFF  FAE,06
....................          putc(c); 
00604:  MOVF   06,W
00606:  BRA    05B0
....................       } 
00608:  BRA    05F8
....................    } 
.................... } 
0060A:  SLEEP 

Configuration Fuses:
   Word  1: F200   HSH PLLEN PRIMARY FCMEN IESO
   Word  2: 3C18   PUT NOBROWNOUT BORV19 NOWDT WDT32768
   Word  3: BF00   CCP2C1 PBADEN CCP3B5 HFOFST TIMER3C0 CCP2B5 MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
