CCS PCH C Compiler, Version 5.058, 28901               18-set-16 18:29

               Filename:   D:\Dropbox\Rodrigo\Projetos PIC\BABUINO v1\Firmwares testes\26k22\26k22 - Toggle led\toggle.lst

               ROM used:   472 bytes (1%)
                           Largest free fragment is 63780
               RAM used:   9 (0%) at main() level
                           33 (1%) worst case
               Stack used: 0 locations
               Stack size: 31

*
00500:  GOTO   0668
.................... #include <babuino.h> 
.................... #include <18F26K22.h> 
.................... //////////// Standard Header file for the PIC18F26K22 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F26K22 
*
00508:  BTFSC  FD8.1
0050A:  BRA    0512
0050C:  CLRF   FEA
0050E:  MOVLW  1D
00510:  MOVWF  FE9
00512:  CLRF   00
00514:  CLRF   01
00516:  CLRF   02
00518:  CLRF   03
0051A:  CLRF   1D
0051C:  CLRF   1E
0051E:  CLRF   1F
00520:  CLRF   20
00522:  MOVF   1C,W
00524:  IORWF  1B,W
00526:  IORWF  1A,W
00528:  IORWF  19,W
0052A:  BZ    0584
0052C:  MOVLW  20
0052E:  MOVWF  21
00530:  BCF    FD8.0
00532:  RLCF   15,F
00534:  RLCF   16,F
00536:  RLCF   17,F
00538:  RLCF   18,F
0053A:  RLCF   1D,F
0053C:  RLCF   1E,F
0053E:  RLCF   1F,F
00540:  RLCF   20,F
00542:  MOVF   1C,W
00544:  SUBWF  20,W
00546:  BNZ   0558
00548:  MOVF   1B,W
0054A:  SUBWF  1F,W
0054C:  BNZ   0558
0054E:  MOVF   1A,W
00550:  SUBWF  1E,W
00552:  BNZ   0558
00554:  MOVF   19,W
00556:  SUBWF  1D,W
00558:  BNC   0578
0055A:  MOVF   19,W
0055C:  SUBWF  1D,F
0055E:  MOVF   1A,W
00560:  BTFSS  FD8.0
00562:  INCFSZ 1A,W
00564:  SUBWF  1E,F
00566:  MOVF   1B,W
00568:  BTFSS  FD8.0
0056A:  INCFSZ 1B,W
0056C:  SUBWF  1F,F
0056E:  MOVF   1C,W
00570:  BTFSS  FD8.0
00572:  INCFSZ 1C,W
00574:  SUBWF  20,F
00576:  BSF    FD8.0
00578:  RLCF   00,F
0057A:  RLCF   01,F
0057C:  RLCF   02,F
0057E:  RLCF   03,F
00580:  DECFSZ 21,F
00582:  BRA    0530
00584:  MOVFF  1D,FEF
00588:  MOVFF  1E,FEC
0058C:  MOVFF  1F,FEC
00590:  MOVFF  20,FEC
00594:  RETURN 0
00596:  MOVF   FE9,W
00598:  MOVWF  0D
0059A:  MOVLW  3B
0059C:  MOVWF  14
0059E:  MOVLW  9A
005A0:  MOVWF  13
005A2:  MOVLW  CA
005A4:  MOVWF  12
005A6:  CLRF   11
005A8:  MOVLW  0A
005AA:  MOVWF  0F
005AC:  BSF    FD8.1
005AE:  CLRF   FEA
005B0:  MOVLW  09
005B2:  MOVWF  FE9
005B4:  MOVFF  0C,18
005B8:  MOVFF  0B,17
005BC:  MOVFF  0A,16
005C0:  MOVFF  09,15
005C4:  MOVFF  14,1C
005C8:  MOVFF  13,1B
005CC:  MOVFF  12,1A
005D0:  MOVFF  11,19
005D4:  RCALL  0508
005D6:  MOVF   01,W
005D8:  MOVF   00,F
005DA:  BNZ   05FA
005DC:  MOVF   0F,W
005DE:  XORLW  01
005E0:  BZ    05FA
005E2:  MOVF   0D,W
005E4:  BZ    05FC
005E6:  ANDLW  0F
005E8:  SUBWF  0F,W
005EA:  BZ    05EE
005EC:  BC    0608
005EE:  BTFSC  0D.7
005F0:  BRA    0608
005F2:  BTFSC  0D.6
005F4:  BRA    05FC
005F6:  MOVLW  20
005F8:  BRA    05FE
005FA:  CLRF   0D
005FC:  MOVLW  30
005FE:  ADDWF  00,F
00600:  MOVF   00,W
00602:  BTFSS  F9E.4
00604:  BRA    0602
00606:  MOVWF  FAD
00608:  BCF    FD8.1
0060A:  MOVFF  14,18
0060E:  MOVFF  13,17
00612:  MOVFF  12,16
00616:  MOVFF  11,15
0061A:  CLRF   1C
0061C:  CLRF   1B
0061E:  CLRF   1A
00620:  MOVLW  0A
00622:  MOVWF  19
00624:  RCALL  0508
00626:  MOVFF  03,14
0062A:  MOVFF  02,13
0062E:  MOVFF  01,12
00632:  MOVFF  00,11
00636:  DECFSZ 0F,F
00638:  BRA    05AC
0063A:  GOTO   06C0 (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=10 
....................  
.................... #FUSES PRIMARY                  //Primary clock is system clock when scs=00 
.................... #FUSES FCMEN                    //Fail-safe clock monitor enabled 
.................... #FUSES IESO                     //Internal External Switch Over mode enabled 
.................... #FUSES PUT                      //Power Up Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES BORV19                   //Brownout reset at 1.9V 
.................... #FUSES PBADEN                   //PORTB pins are configured as analog input channels on RESET 
.................... #FUSES CCP3B5                   //CCP3 input/output multiplexed with RB5 
.................... #FUSES HFOFST                   //High Frequency INTRC starts clocking CPU immediately 
.................... #FUSES TIMER3C0                 //Timer3 Clock In is on pin C0 
.................... #FUSES CCP2B5                   //CCP2 input/output multiplexed with RB5 
.................... #FUSES MCLR                     //Master Clear pin enabled 
.................... #FUSES STVREN                   //Stack full/underflow will cause reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NOCPB                    //No Boot Block code protection 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES NOWRTC                   //Configuration registers not write protected 
.................... #FUSES NOWRTB                   //Boot block not write protected 
.................... #FUSES NOWRTD                   //Data EEPROM not write protected 
.................... #FUSES NOEBTR                   //Memory not protected from table reads 
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads 
....................  
....................  
.................... #use delay(clock=64MHz,crystal=16MHz) 
0063E:  CLRF   FEA
00640:  MOVLW  0A
00642:  MOVWF  FE9
00644:  MOVF   FEF,W
00646:  BZ    0664
00648:  MOVLW  14
0064A:  MOVWF  01
0064C:  CLRF   00
0064E:  DECFSZ 00,F
00650:  BRA    064E
00652:  DECFSZ 01,F
00654:  BRA    064C
00656:  MOVLW  BF
00658:  MOVWF  00
0065A:  DECFSZ 00,F
0065C:  BRA    065A
0065E:  BRA    0660
00660:  DECFSZ FEF,F
00662:  BRA    0648
00664:  GOTO   06D2 (RETURN)
.................... #use rs232(baud=19200,parity=N,UART1,bits=8,stream=RS2USB) 
....................  
.................... #include <bootloader.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                       BOOTLOADER.H                                //// 
.................... ////                                                                   //// 
.................... ////  This include file must be included by any application loaded     //// 
.................... ////  by the example bootloader (ex_bootloader.c).                     //// 
.................... ////                                                                   //// 
.................... ////  The directives in this file relocate the reset and interrupt     //// 
.................... ////  vectors as well as reserving space for the bootloader.           //// 
.................... ////                                                                   //// 
.................... ////  LOADER_END may need to be adjusted for a specific chip and       //// 
.................... ////  bootloader.  LOADER_END must be 1 minus a multiple of            //// 
.................... ////  FLASH_ERASE_SIZE.                                                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2014 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #ifndef __BOOTLOADER_H__ 
.................... #define __BOOTLOADER_H__ 
....................  
.................... #ifndef LOADER_END 
....................  #if defined(__PCM__) 
....................   #ifdef BOOTLOADER_MODE2X 
....................    #define LOADER_END 0x4BF 
....................   #else 
....................    #define LOADER_END 0x33F 
....................   #endif 
....................  #elif defined(__PCH__) 
....................   #define FLASH_SIZE getenv("FLASH_ERASE_SIZE") 
....................   #if ((0x500 % FLASH_SIZE) == 0)         //IF 0x500 is even flash boundary 
....................    #define LOADER_END   0x4FF 
....................   #else                                  //ELSE, goto next even boundary 
....................    #define LOADER_END   ((0x500+FLASH_SIZE-(0x500 % FLASH_SIZE))-1) 
....................   #endif 
....................  #else 
....................   #error Bootloader only works with PCM or PCH compiler 
....................  #endif 
.................... #endif 
....................  
.................... #define LOADER_SIZE   LOADER_END 
....................  
.................... #ifndef BOOTLOADER_AT_START 
....................  #define BOOTLOADER_AT_START 
.................... #endif 
....................  
.................... #ifndef _bootloader 
....................  #if defined(__PCM__) 
....................   #build(reset=LOADER_END+1, interrupt=LOADER_END+5) 
....................  #elif defined(__PCH__) 
....................   #build(reset=LOADER_END+1, interrupt=LOADER_END+9) 
....................  #endif 
....................  
....................  #org 0, LOADER_END {} 
.................... #else 
....................  #ifdef __PCM__ 
....................   #if getenv("PROGRAM_MEMORY") <= 0x800 
....................    #org LOADER_END+3, (getenv("PROGRAM_MEMORY") - 1) {} 
....................   #else 
....................    #org LOADER_END+3, 0x7FF {} 
....................    #if getenv("PROGRAM_MEMORY") <= 0x1000 
....................     #org 0x800, (getenv("PROGRAM_MEMORY") - 1) {} 
....................    #else 
....................     #org 0x800, 0xFFF{} 
....................     #if getenv("PROGRAM_MEMORY") <= 0x1800 
....................      #org 0x1000, (getenv("PROGRAM_MEMORY") - 1) {} 
....................     #else 
....................      #org 0x1000, 0x17FF {} 
....................      #if getenv("PROGRAM_MEMORY") <= 0x2000 
....................       #org 0x1800, (getenv("PROGRAM_MEMORY") - 1) {} 
....................      #else 
....................       #org 0x1800, 0x1FFF {} 
....................       #if getenv("PROGRAM_MEMORY") <= 0x2800 
....................        #org 0x2000, (getenv("PROGRAM_MEMORY") - 1) {} 
....................       #else 
....................        #org 0x2000, 0x27FF {} 
....................        #if getenv("PROGRAM_MEMORY") <= 0x3000 
....................         #org 0x2800, (getenv("PROGRAM_MEMORY") - 1) {} 
....................        #else 
....................         #org 0x2800, 0x2FFF {} 
....................         #if getenv("PROGRAM_MEMORY") <= 0x3800 
....................          #org 0x3000, (getenv("PROGRAM_MEMORY") - 1) {} 
....................         #else 
....................          #org 0x3000, 0x37FF {} 
....................          #org 0x3800, 0x3FFF {} 
....................         #endif 
....................        #endif 
....................       #endif 
....................      #endif 
....................     #endif 
....................    #endif 
....................   #endif 
....................  #else 
....................   #if getenv("PROGRAM_MEMORY") <= 0x10000 
....................    #org LOADER_END+5, (getenv("PROGRAM_MEMORY") - 1) {} 
....................   #else 
....................    #org LOADER_END+5, 0xFFFE {} 
....................    #org 0x10000, (getenv("PROGRAM_MEMORY") - 1) {} 
....................   #endif 
....................  #endif 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... #define PIN_0              PIN_C7 
.................... #define PIN_1              PIN_C6 
.................... #define PIN_2              PIN_B5 
.................... #define PIN_3              PIN_B0 
.................... #define PIN_4              PIN_C2 
.................... #define PIN_5              PIN_C1 
.................... #define PIN_6              PIN_A4 
.................... #define PIN_7              PIN_C0 
.................... #define PIN_8              PIN_B6 
.................... #define PIN_9              PIN_B7 
.................... #define PIN_10             PIN_A5 
.................... #define PIN_11             PIN_C4 
.................... #define PIN_12             PIN_C5 
.................... #define PIN_13             PIN_C3 
....................  
.................... #define PIN_AN0            PIN_A1 
.................... #define PIN_AN1            PIN_A0 
.................... #define PIN_AN2            PIN_B4 
.................... #define PIN_AN3            PIN_B3    
.................... #define PIN_AN4            PIN_B2 
.................... #define PIN_AN5            PIN_B1 
....................  
....................  
....................  
....................  
.................... #define DELAY        500 
....................  
.................... void main() 
00668:  CLRF   FF8
0066A:  BCF    FD0.7
0066C:  BSF    FB8.3
0066E:  MOVLW  40
00670:  MOVWF  FAF
00672:  MOVLW  03
00674:  MOVWF  FB0
00676:  MOVLW  A6
00678:  MOVWF  FAC
0067A:  MOVLW  90
0067C:  MOVWF  FAB
0067E:  MOVLB  F
00680:  CLRF   x38
00682:  CLRF   x39
00684:  CLRF   x3A
00686:  CLRF   F77
00688:  CLRF   F78
0068A:  CLRF   F79
0068C:  CLRF   08
0068E:  CLRF   07
00690:  CLRF   06
00692:  CLRF   05
.................... { 
.................... //int32 i=0; 
.................... unsigned long long int i=0; //or int32 i=0; 
....................    while(TRUE) 
....................    { 
....................  
....................    output_toggle(PIN_13); 
00694:  BCF    F94.3
00696:  BTG    F8B.3
....................    printf("%3lu ",++i); 
00698:  MOVLW  01
0069A:  ADDWF  05,F
0069C:  BTFSC  FD8.0
0069E:  INCF   06,F
006A0:  BTFSC  FD8.2
006A2:  INCF   07,F
006A4:  BTFSC  FD8.2
006A6:  INCF   08,F
006A8:  MOVLW  03
006AA:  MOVWF  FE9
006AC:  MOVFF  08,0C
006B0:  MOVFF  07,0B
006B4:  MOVFF  06,0A
006B8:  MOVFF  05,09
006BC:  MOVLB  0
006BE:  BRA    0596
006C0:  MOVLW  20
006C2:  BTFSS  F9E.4
006C4:  BRA    06C2
006C6:  MOVWF  FAD
....................     
....................    delay_ms(DELAY); 
006C8:  MOVLW  02
006CA:  MOVWF  09
006CC:  MOVLW  FA
006CE:  MOVWF  0A
006D0:  BRA    063E
006D2:  DECFSZ 09,F
006D4:  BRA    06CC
006D6:  MOVLB  F
006D8:  BRA    0694
....................  
....................       //TODO: User Code 
....................    } 
....................  
.................... } 
006DA:  SLEEP 

Configuration Fuses:
   Word  1: F200   HSH PLLEN PRIMARY FCMEN IESO
   Word  2: 3C18   PUT NOBROWNOUT BORV19 NOWDT WDT32768
   Word  3: BF00   CCP2C1 PBADEN CCP3B5 HFOFST TIMER3C0 CCP2B5 MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
